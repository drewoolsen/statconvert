"is significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][2], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is  not significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][1], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
}
}
cor_convert <- function(test_obj){
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]) {
if(test_obj$estimate < 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate < 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
}
}
cor_convert(cor1)
usethis::use_r("anova_convert")
?anova
data("mtcars")
test1 <- t.test(mtcars$mpg, mtcars$hp)
View(mtcars)
an <- anova(test1)
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
an <- anova(cor1)
an <- anova(mtcars$mpg)
an <- anova(mtcars$mpg, mtcars$hp)
an <- anova(mtcars$mpg, mtcars$hp)
md <- lm(mpg ~ wt, mtcars)
an <- anova(md)
an
print(an)
data("mtcars")
md <- lm(mpg ~ wt, mtcars)
an <- anova(md)
print(an)
class(an)
View(an)
ttest_convert <- function(test_obj) {
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(length(test_obj$estimate) == 1){
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is not significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
} else {
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][2], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is  not significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][1], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
}
}
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
}
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
print(an)
View(an)
row.names(an)
rn <- row.names(an)
XVAL <- rn[1]
XVAL
`Pr(>F)`$XVAL
an$`Pr(>F)`
lm$method[1]
print(an)
test_obj
test_obj <- an
test_obj$Df[1]
test_obj$Df[2]
test_obj <- an
rn <- row.names(test_obj)
XVAL <- rn[1]
XVAL
FVAL <- round(test_obj$`F value`[1], 3)
PVAL
FVAL
FVAL <- round(test_obj$`F value`[1], 2)
FVAL
PVAL <- round(test_obj$`Pr(>F)`[1], 3)
PVAL
PVAL <- test_obj$`Pr(>F)`[1]
PVAL
PVAL <- round(test_obj$`Pr(>F)`[1], 3)
PVAL
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
PVAL
cat("An analysis of variance showed that the effect of ",XVAL," was significant, ",
"F(", test_obj$Df[1], ", ", test_obj$Df[2], ") = ", FVAL, ", p = ",
PVAL, ".", sep = " ")
cat("An analysis of variance showed that the effect of ",XVAL," was significant, ",
"F(", test_obj$Df[1], ", ", test_obj$Df[2], ") = ", FVAL, ", p = ",
PVAL, ".", sep = "")
rn <- row.names(test_obj)
XVAL <- rn[1]
FVAL <- round(test_obj$`F value`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
if(test_obj$`Pr(>F)`[1] < 0.001){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p < 0.001.", sep = "")
} else if(test_obj$`Pr(>F)`[1] < 0.05 & test_obj$`Pr(>F)`[1] > 0.01){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
} else{
cat("An analysis of variance showed that the effect of ",XVAL,
" was not significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
}
rn <- row.names(test_obj)[1]
oneway_anova_convert <- function(test_obj){
XVAL <- row.names(test_obj)[1]
FVAL <- round(test_obj$`F value`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
if(test_obj$`Pr(>F)`[1] < 0.001){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p < 0.001.", sep = "")
} else if(test_obj$`Pr(>F)`[1] < 0.05 & test_obj$`Pr(>F)`[1] > 0.01){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
} else{
cat("An analysis of variance showed that the effect of ",XVAL,
" was not significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
}
}
oneway_anova_convert(an)
class(an)
data(mtcars)
an <- aov(mpg ~ wt, data = mtcars)
summary(an)
class(an)
an$qr$tol
t.test
?t.test
?aov
?summary.aov
summary.aov
an$effets
an$effects
print.aov
asgn <- an$assign[an$qr$pivot[1L:an$rank]]
asgn
summary.aov
effects <- an$effects
effects <- as.matrix(effects)[seq_along(asgn), , drop = FALSE]
effects
summary(aov)
summary(an)
summary.aov
TT <- ms/ms[nt]
summary(an)
anx <- summary(an)
View(anx)
anx[1]
class(an)
class(test_obj) == "aov"
class(an) == "aov"
class(an[1]) == "aov"
an[1]
class(an)[1] == "aov"
test_obj <- aov(mpg ~ wt, data = mtcars)
test_obj <- summary(test_obj)[1]
test_obj
View(test_obj)
test_obj <- summary(test_obj)[[1]]
test_obj
test_obj <- summary(test_obj)[1]
test_obj
test_obj <- summary(test_obj)[1]
test_obj
test_obj <- aov(mpg ~ wt, data = mtcars)
test_obj <- summary(test_obj)[1]
test_obj
test_obj <- aov(mpg ~ wt, data = mtcars)
test_obj <- summary(test_obj[[1]]
test_obj <- aov(mpg ~ wt, data = mtcars)
test_obj <- aov(mpg ~ wt, data = mtcars)
test_obj <- summary(test_obj)[[1]]
test_obj
View(test_obj)
XVAL <- row.names(test_obj)[1]
FVAL <- round(test_obj$`F value`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 3)
PVAL <- test_obj$`Pr(>F)`[1]
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
an <- aov(mpg ~ wt, data = mtcars)
summary(an)
oneway_anova_convert(an)
test_obj <- summary(an)[[1]]
XVAL <- row.names(test_obj)[1]
XVAL
XVAL <- gsub(" ", "", XVAL)
XVAL
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
an <- aov(mpg ~ wt, data = mtcars)
summary(an)
oneway_anova_convert(an)
class(an)[1]
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
an <- aov(mpg ~ wt, data = mtcars)
summary(an)
class(an)[1]
oneway_anova_convert(an)
md <- lm(mpg ~ wt, data = mtcars)
summary(md)
anova(md)
ad <- anova(md)
class(ad)
summary(an)
class(an)[1]
class(ad)[1]
oneway_anova_convert(an)
statconvert(an)
source("~/School Documents/QAC misc/statconvert/R/statconvert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/ttest_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/oneway_anova_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/cor_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/chisq_convert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/statconvert.R", echo=TRUE)
source("~/School Documents/QAC misc/statconvert/R/statconvert.R", echo=TRUE)
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
statconvert(cor1)
library(ggplot2)
data("starwars")
library(dyplr)
data("starwars")
library(dpylr)
library(dplyr)
data("starwars")
chi1 <- chisq.test(starwars$species, starwars$homeworld)
statconvert(chi1)
statconvert(chi2)
chi2 <- chisq.test(starwars$skin_color, starwars$hair_color)
chi3 <- chisq.test(mtcars$cyl, p=rep(1,length(mtcars$cyl)), rescale.p=TRUE)
chi4 <- chisq.test(mtcars$cyl, p=seq(1,length(mtcars$cyl)), rescale.p=TRUE)
statconvert(chi1)
statconvert(chi2)
statconvert(chi3)
statconvert(chi4)
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
aov1 <- aov(mpg ~ wt, data = mtcars)
aov1$method
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(!is.null(class(test_obj$method)) & class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(!is.null(class(test_obj$method)) & class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (!is.null(class(test_obj$method)) & class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
class(aov1)
is.null(aov1$method)
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(!is.null(test_obj$method[1]) & class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(!is.null(test_obj$method[1]) & class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (!is.null(test_obj$method[1]) & class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
length(test_obj$method) > 0
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(length(test_obj$method) > 0 & class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(length(test_obj$method) > 0 & class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (length(test_obj$method) > 0 & class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
return(NULL)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
return(NULL)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
return(NULL)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
return(NULL)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
invisible(return(NULL))
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
return(NULL)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
return(NULL)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
return(NULL)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj)[1] == "aov" | class(test_obj)[1] == "anova"){
oneway_anova_convert(test_obj)
invisible(return(NULL))
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
return(NULL)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
return(NULL)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
return(NULL)
}
}
aov1 <- aov(mpg ~ wt, data = mtcars)
statconvert(aov1)
