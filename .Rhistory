}
if(test_obj$estimate > 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
}
}
cor_convert(cor1)
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
cor1$method[1]
cor1 <- cor.test(mtcars$mpg, mtcars$qsec, method = "kendall")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec, method = "spearman")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec, method = "spearman", exact = F)
cor1$method[1]
cor1 <- cor.test(mtcars$mpg, mtcars$qsec, method = "kendall", exact = F)
cor1$method[1]
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
cor_convert <- function(test_obj){
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]) {
if(test_obj$estimate < 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate < 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
}
}
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
}
ttest_convert <- function(test_obj) {
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(length(test_obj$estimate) == 1){
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is not significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
} else {
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][2], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is  not significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][1], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
}
}
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
statconvert(cor1)
#goal: take statistical test output and translate into english
#tests: anova (one way), ttest, corr, chisq
# Reporting a significant single sample t-test (μ ≠ μ0):
# Students taking statistics courses in psychology at the University of Washington reported studying more hours
# for tests (M = MEAN, SD = STANDARD DEV) than did UW college students in in general, t(DF) = T VAL, p = P VAL.
#no way to get sd from ttest object, may need to require that as well as ttest object
#alt: run ttest in the function (so parameters are just the relevant data bits), and then use results for output
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj) == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
# tests
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
cor_convert <- function(test_obj){
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]) {
if(test_obj$estimate < 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate < 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
}
}
chisq_convert <- function(test_obj) {
if (test_obj$p.value < .001) {
test_obj$p.value.text <- "< .001"
} else if (test_obj$p.value < .005) {
test_obj$p.value.text <- "< .005"
} else if (test_obj$p.value < .01) {
test_obj$p.value.text <- "< .01"
} else if (test_obj$p.value < .05) {
test_obj$p.value.text <- "< .05"
} else {
test_obj$p.value.text <- paste("=", round(test_obj$p.value, 3))
}
test_obj$statistic.text <- round(test_obj$statistic, 3)
vars <- test_obj$data.name
signif <- test_obj$p.value < .05
data_string <- paste0("X² (df = ", test_obj$parameter, ") = ",
test_obj$statistic.text, ", p ", test_obj$p.value.text)
if (grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
is_significant <- ifelse(signif, "", "not ")
cat("A chi-square test of independence was performed.\n")
cat("The relation between ", vars[[1]][1], " is ", is_significant,
"significant, ", data_string, ".\n", sep="")
} else if (test_obj$method[1] == "Chi-squared test for given probabilities") {
is_distributed <- ifelse(signif, "not ", "")
# is the distribution uniform?
if (var(test_obj$expected) == 0) is_uniform = "uniformly"
else is_uniform = "according to the distribution provided"
cat("A chi-square test of goodness-of-fit was performed.\n")
cat("The elements of ", vars, " are ", is_distributed, "distributed ",
is_uniform, ", ", data_string, ".\n", sep="")
}
else stop()
}
ttest_convert <- function(test_obj) {
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(length(test_obj$estimate) == 1){
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is not significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
} else {
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][2], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is  not significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][1], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
}
}
oneway_anova_convert <- function(test_obj){
XVAL <- row.names(test_obj)[1]
FVAL <- round(test_obj$`F value`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
if(test_obj$`Pr(>F)`[1] < 0.001){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p < 0.001.", sep = "")
} else if(test_obj$`Pr(>F)`[1] < 0.05 & test_obj$`Pr(>F)`[1] > 0.01){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
} else{
cat("An analysis of variance showed that the effect of ",XVAL,
" was not significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
}
}
#goal: take statistical test output and translate into english
#tests: anova (one way), ttest, corr, chisq
# Reporting a significant single sample t-test (μ ≠ μ0):
# Students taking statistics courses in psychology at the University of Washington reported studying more hours
# for tests (M = MEAN, SD = STANDARD DEV) than did UW college students in in general, t(DF) = T VAL, p = P VAL.
#no way to get sd from ttest object, may need to require that as well as ttest object
#alt: run ttest in the function (so parameters are just the relevant data bits), and then use results for output
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj) == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
# tests
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
statconvert(cor1)
data("starwars")
chi1 <- chisq.test(starwars$species, starwars$homeworld)
#goal: take statistical test output and translate into english
#tests: anova (one way), ttest, corr, chisq
# Reporting a significant single sample t-test (μ ≠ μ0):
# Students taking statistics courses in psychology at the University of Washington reported studying more hours
# for tests (M = MEAN, SD = STANDARD DEV) than did UW college students in in general, t(DF) = T VAL, p = P VAL.
#no way to get sd from ttest object, may need to require that as well as ttest object
#alt: run ttest in the function (so parameters are just the relevant data bits), and then use results for output
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj) == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
# tests
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
statconvert(cor1)
data("starwars", package="dplyr")
chi1 <- chisq.test(starwars$species, starwars$homeworld)
chi2 <- chisq.test(starwars$skin_color, starwars$hair_color)
chi3 <- chisq.test(mtcars$cyl, p=rep(1,length(mtcars$cyl)), rescale.p=TRUE)
chi4 <- chisq.test(mtcars$cyl, p=seq(1,length(mtcars$cyl)), rescale.p=TRUE)
statconvert(chi1)
statconvert(chi2)
statconvert(chi3)
statconvert(chi4)
cor_convert <- function(test_obj){
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]) {
if(test_obj$estimate < 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) > .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are strongly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate < 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly negatively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(test_obj$estimate > 0 & abs(test_obj$estimate) < .5) {
cat(strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][1], split = "\\$")[[1]][2], "and",
strsplit(strsplit(test_obj$data.name, split = " and ")[[1]][2], split = "\\$")[[1]][2],
"are weakly positively correlated","r(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
}
}
oneway_anova_convert <- function(test_obj){
XVAL <- row.names(test_obj)[1]
FVAL <- round(test_obj$`F value`[1], 2)
PVAL <- round(test_obj$`Pr(>F)`[1], 2)
if(test_obj$`Pr(>F)`[1] < 0.001){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p < 0.001.", sep = "")
} else if(test_obj$`Pr(>F)`[1] < 0.05 & test_obj$`Pr(>F)`[1] > 0.01){
cat("An analysis of variance showed that the effect of ",XVAL,
" was significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
} else{
cat("An analysis of variance showed that the effect of ",XVAL,
" was not significant, ", "F(", test_obj$Df[1], ", ", test_obj$Df[2],
") = ", FVAL, ", p = ", PVAL, ".", sep = "")
}
}
ttest_convert <- function(test_obj) {
if(test_obj$p.value < .001) {
test_obj$p.value.text = "<.001"
} else {
test_obj$p.value.text = round(test_obj$p.value, 3)
}
if(length(test_obj$estimate) == 1){
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is not significantly different from the given null hypothesis (M =",
test_obj$null.value[[1]], "), t(", round(test_obj$parameter, 3), ") =",
round(test_obj$statistic[[1]],3),", p = ", test_obj$p.value.text)
}
} else {
if(1 - test_obj$p.value >= attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][2], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
if(1 - test_obj$p.value < attributes(test_obj$conf.int)$conf.level[1]){
cat("The mean of", strsplit(test_obj$data.name, split = " and ")[[1]][1],
"is  not significantly different from the mean of",
strsplit(test_obj$data.name, split = " and ")[[1]][1], ", t(",
round(test_obj$parameter, 3), ") =", round(test_obj$statistic[[1]],3), ", p = ",
test_obj$p.value.text)
}
}
}
chisq_convert <- function(test_obj) {
if (test_obj$p.value < .001) {
test_obj$p.value.text <- "< .001"
} else if (test_obj$p.value < .005) {
test_obj$p.value.text <- "< .005"
} else if (test_obj$p.value < .01) {
test_obj$p.value.text <- "< .01"
} else if (test_obj$p.value < .05) {
test_obj$p.value.text <- "< .05"
} else {
test_obj$p.value.text <- paste("=", round(test_obj$p.value, 3))
}
test_obj$statistic.text <- round(test_obj$statistic, 3)
vars <- test_obj$data.name
signif <- test_obj$p.value < .05
data_string <- paste0("X² (df = ", test_obj$parameter, ") = ",
test_obj$statistic.text, ", p ", test_obj$p.value.text)
if (grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
is_significant <- ifelse(signif, "", "not ")
cat("A chi-square test of independence was performed.\n")
cat("The relation between ", vars[[1]][1], " is ", is_significant,
"significant, ", data_string, ".\n", sep="")
} else if (test_obj$method[1] == "Chi-squared test for given probabilities") {
is_distributed <- ifelse(signif, "not ", "")
# is the distribution uniform?
if (var(test_obj$expected) == 0) is_uniform = "uniformly"
else is_uniform = "according to the distribution provided"
cat("A chi-square test of goodness-of-fit was performed.\n")
cat("The elements of ", vars, " are ", is_distributed, "distributed ",
is_uniform, ", ", data_string, ".\n", sep="")
}
else stop()
}
#goal: take statistical test output and translate into english
#tests: anova (one way), ttest, corr, chisq
# Reporting a significant single sample t-test (μ ≠ μ0):
# Students taking statistics courses in psychology at the University of Washington reported studying more hours
# for tests (M = MEAN, SD = STANDARD DEV) than did UW college students in in general, t(DF) = T VAL, p = P VAL.
#no way to get sd from ttest object, may need to require that as well as ttest object
#alt: run ttest in the function (so parameters are just the relevant data bits), and then use results for output
statconvert <- function(test_obj){
ttest_method = c("Welch Two Sample t-test", "One Sample t-test", "Paired t-test", " Two Sample t-test")
cortest_method = c("Pearson's product-moment correlation","Spearman's rank correlation rho",
"Kendall's rank correlation tau")
chisq_method = c("Pearson's Chi-squared test", "Chi-squared test for given probabilities")
if(class(test_obj) == "htest" & test_obj$method[1] %in% ttest_method){
ttest_convert(test_obj)
}
if(class(test_obj) == "htest" & test_obj$method[1] %in% cortest_method) {
cor_convert(test_obj)
}
if(class(test_obj) == "anova"){
oneway_anova_convert(test_obj)
}
# as far as I can tell here are the two options for the method of
# a chi-squared test of independence:
# "Pearson's Chi-squared test"
# "Pearson's Chi-squared test with simulated p-value ..."
# so we just check if the first string is a substring of method
if (class(test_obj) == "htest" & test_obj$method[1] %in% chisq_method |
grepl("Pearson's Chi-squared test", test_obj$method[1], fixed=TRUE)) {
chisq_convert(test_obj)
}
}
# tests
data("mtcars")
cor1 <- cor.test(mtcars$mpg, mtcars$qsec)
test1 <- t.test(mtcars$mpg, mtcars$hp)
statconvert(test1)
statconvert(cor1)
data("starwars", package = 'dplyr')
chi1 <- chisq.test(starwars$species, starwars$homeworld)
chi2 <- chisq.test(starwars$skin_color, starwars$hair_color)
chi3 <- chisq.test(mtcars$cyl, p=rep(1,length(mtcars$cyl)), rescale.p=TRUE)
chi4 <- chisq.test(mtcars$cyl, p=seq(1,length(mtcars$cyl)), rescale.p=TRUE)
statconvert(chi1)
statconvert(chi2)
statconvert(chi3)
statconvert(chi4)
